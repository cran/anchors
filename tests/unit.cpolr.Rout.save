
R version 2.13.0 (2011-04-13)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(anchors)
Loading required package: rgenoud
##  rgenoud (Version 5.7-1, Build Date: 2010-08-26)
##  See http://sekhon.berkeley.edu/rgenoud for additional documentation.
Loading required package: MASS

##  anchors (Version 3.0-7, Build Date: 2011-05-22)
##  See http://wand.stanford.edu/anchors for additional documentation and support.

> 
> cat("UNIT TESTS FOR CPOLR\n\n")
UNIT TESTS FOR CPOLR

> ## a little helper function for demo
> 
> cat("Define C\n")
Define C
> data(poleff)
> vign <- anchors(xsayself ~ xsay1 + xsay2 + xsay3 + xsay4 + xsay5, 
+                 data = poleff, method="C")

There is at least one missing category: 5 7 

> #                options=anchors.options(debug=1))
> summary(vign)

ANCHORS: SUMMARY OF RELATIVE RANK ANALYSIS:

Overview of C-ranks

Number of cases: 601 with interval value, 174 with scalar value

Maximum possible C-rank value: 11

Interval on C-scale: Frequency and proportions Cs to Ce
           N  Prop MinEnt
 1 to  1 108 0.139      1
 2 to  2  12 0.015      2
 3 to  3   1 0.001      3
 4 to  4   1 0.001      4
 5 to  5   0 0.000      5
 6 to  6   1 0.001      6
 7 to  7   0 0.000      7
 8 to  8   2 0.003      8
 9 to  9   5 0.006      9
10 to 10   6 0.008     10
11 to 11  38 0.049     11
 1 to  4  13 0.017      1
 1 to  5   3 0.004      1
 1 to  6  47 0.061      6
 1 to  7   5 0.006      6
 1 to  8  65 0.084      6
 1 to  9  17 0.022      6
 1 to 10 155 0.200      6
 1 to 11  69 0.089      6
 2 to  4   2 0.003      2
 2 to  5   1 0.001      2
 2 to  6   6 0.008      6
 2 to  7   1 0.001      6
 2 to  8   9 0.012      6
 2 to  9   2 0.003      6
 2 to 10  55 0.071      6
 2 to 11  50 0.065      6
 3 to  7   2 0.003      6
 3 to  8   3 0.004      6
 3 to  9   3 0.004      6
 3 to 10  10 0.013      6
 3 to 11  17 0.022      6
 4 to  9   3 0.004      6
 4 to 10   8 0.010      6
 4 to 11  21 0.027      6
 5 to  8   1 0.001      6
 5 to  9   1 0.001      6
 5 to 10   3 0.004      6
 5 to 11   3 0.004      6
 6 to  9   2 0.003      6
 6 to 10   4 0.005      6
 6 to 11   8 0.010      6
 7 to 10   1 0.001     10
 7 to 11   2 0.003     11
 8 to 10   3 0.004     10
 8 to 11   6 0.008     11

Note: MinEnt is the rank for the interval that minimizes entropy

Summary of C-ranks with ties/intervals broken:

Distribution of ranks omiting interval cases
     1     2     3     4 5     6 7     8     9    10    11
 0.621 0.069 0.006 0.006 0 0.006 0 0.011 0.029 0.034 0.218

Distribution of ranks allocating interval cases uniformly
     1     2     3     4     5     6     7    8     9    10    11
 0.196 0.092 0.083 0.089 0.084 0.088 0.076 0.08 0.071 0.067 0.074

Distribution of ranks allocating interval cases via cpolr
and conditioning on observed ranks
    1     2     3     4     5     6     7     8     9    10    11 
0.312 0.090 0.015 0.102 0.000 0.260 0.000 0.073 0.039 0.035 0.075 

Allocating cases to their MinEnt values produces
    1     2     3     4     5     6     7     8     9    10    11 
0.160 0.019 0.001 0.001 0.000 0.737 0.000 0.003 0.006 0.013 0.059 
> 
> cat("First cpolr\n")
First cpolr
> poleff <- insert(poleff, vign)
> out <- cpolr(cbind(Cs, Ce) ~ as.factor(china) + age + male + educyrs, 
+             data = poleff)

There is at least one missing category: 5 7 

> summary(out)
Call:
cpolr(formula = cbind(Cs, Ce) ~ as.factor(china) + age + male + 
    educyrs, data = poleff)

Coefficients:
                      Value Std. Error t value
as.factor(china)1 -0.591756   0.116671 -5.0720
age                0.003443   0.003616  0.9520
male              -0.056089   0.103521 -0.5418
educyrs            0.010879   0.010497  1.0364

Intercepts:
      Value   Std. Error t value
1|2   -0.5269  0.2036    -2.5881
2|3   -0.2671  0.2086    -1.2805
3|4   -0.2273  0.2110    -1.0774
4|6    0.0479  0.2337     0.2047
6|8    0.8129  0.2272     3.5776
8|9    1.0836  0.2155     5.0271
9|10   1.2718  0.2126     5.9824
10|11  1.4979  0.2071     7.2329

Residual Deviance: 953.476 
AIC: 977.476 
(206 observations deleted due to missingness)
> 
> 
> 
> ##
> cat("Checking cpolr against ordinal probit (polr) for scalar responses\n")
Checking cpolr against ordinal probit (polr) for scalar responses
> data(freedom)
> C <- anchors(self ~ vign1 + vign2 + vign3 + vign4 + vign5 + vign6,
+              data = freedom, method="C")
> freedom <- insert(freedom, C)
> 
> check2 <- polr(as.factor(Cs) ~ as.factor(country) + sex + age + educ,
+                data = freedom, method = "probit")
> test2 <- cpolr(cbind(Cs, Cs) ~ as.factor(country) + sex + age + educ,
+               data = freedom)
> 
> cat("Comparing point estimates for the polr estimates (first column)
+ and the cpolr estimates (second column) for the coefficients\n")
Comparing point estimates for the polr estimates (first column)
and the cpolr estimates (second column) for the coefficients
> cbind(check2$coef, test2$coef)
                                  [,1]         [,2]
as.factor(country)Eurasia  0.384968050  0.384968050
as.factor(country)Oceania -0.586413658 -0.586413658
sex                        0.115692250  0.115692250
age                       -0.002042187 -0.002042187
educ                      -0.022924997 -0.022924997
> cat("Comparing point estimates for the polr estimates (first column)
+ and the cpolr estimates (second column) for the cut points\n")
Comparing point estimates for the polr estimates (first column)
and the cpolr estimates (second column) for the cut points
> cbind(check2$zeta, test2$zeta)
            [,1]       [,2]
1|2   -1.1829111 -1.1829111
2|3   -0.7425480 -0.7425480
3|4   -0.6725764 -0.6725764
4|5   -0.4471512 -0.4471512
5|6   -0.1443458 -0.1443458
6|7    0.1595758  0.1595758
7|8    0.3068685  0.3068685
8|9    0.7592207  0.7592207
9|10   0.7727150  0.7727150
10|11  0.9063777  0.9063777
11|12  0.9351285  0.9351285
12|13  1.1784881  1.1784881
> 
> cat("These equalities MUST be true\n")
These equalities MUST be true
> allequal.test(check2$coef, test2$coef)
Expecting all.equal() = TRUE  :  test is correctly TRUE 
> allequal.test(check2$zeta, test2$zeta)
Expecting all.equal() = TRUE  :  test is correctly TRUE 
> 
> 
> ##
> cat("Create a dataset with holes in C\n")
Create a dataset with holes in C
> idx <- poleff$Cs == poleff$Ce
> poleff2 <- poleff[idx,]
> nrow(poleff)
[1] 981
> nrow(poleff2)
[1] 380
> 
> cat("Compare with polr using data with holes in C\n")
Compare with polr using data with holes in C
> (zc <- summary(cpolr(cbind(Cs, Cs) ~ as.factor(china) + age + male + educyrs, 
+             data = poleff2, Hess=TRUE)))

There is at least one missing category: 5 7 

Call:
cpolr(formula = cbind(Cs, Cs) ~ as.factor(china) + age + male + 
    educyrs, data = poleff2, Hess = TRUE)

Coefficients:
                      Value Std. Error t value
as.factor(china)1 -1.076884   0.218228 -4.9347
age                0.007570   0.007024  1.0777
male              -0.157474   0.196312 -0.8022
educyrs            0.007323   0.020005  0.3661

Intercepts:
      Value   Std. Error t value
1|2    0.1221  0.3485     0.3504
2|3    0.3312  0.3487     0.9500
3|4    0.3492  0.3488     1.0012
4|6    0.3672  0.3489     1.0523
6|8    0.3852  0.3490     1.1035
8|9    0.4220  0.3493     1.2081
9|10   0.5191  0.3502     1.4824
10|11  0.6471  0.3517     1.8398

Residual Deviance: 378.658 
AIC: 402.658 
(206 observations deleted due to missingness)
> 
> (zp <- summary(polr( as.factor(Cs) ~ as.factor(china) + age + male + educyrs, 
+             data = poleff2, method="probit", Hess=TRUE)))
Call:
polr(formula = as.factor(Cs) ~ as.factor(china) + age + male + 
    educyrs, data = poleff2, Hess = TRUE, method = "probit")

Coefficients:
                      Value Std. Error t value
as.factor(china)1 -1.076884   0.218228 -4.9347
age                0.007570   0.007024  1.0777
male              -0.157474   0.196312 -0.8022
educyrs            0.007323   0.020005  0.3661

Intercepts:
      Value   Std. Error t value
1|2    0.1221  0.3485     0.3504
2|3    0.3312  0.3487     0.9500
3|4    0.3492  0.3488     1.0012
4|6    0.3672  0.3489     1.0523
6|8    0.3852  0.3490     1.1035
8|9    0.4220  0.3493     1.2081
9|10   0.5191  0.3502     1.4824
10|11  0.6471  0.3517     1.8398

Residual Deviance: 378.658 
AIC: 402.658 
(206 observations deleted due to missingness)
> 
> cat("This equality MUST be true\n")
This equality MUST be true
> allequal.test(zc$coef, zp$coef)
Expecting all.equal() = TRUE  :  test is correctly TRUE 
> 
> ##
> cat("Compare with polr using data with holes in C -- one covariate\n")
Compare with polr using data with holes in C -- one covariate
> (zp <- summary(polr( as.factor(Cs) ~ male, data = poleff2, method="probit", Hess=TRUE)))
Call:
polr(formula = as.factor(Cs) ~ male, data = poleff2, Hess = TRUE, 
    method = "probit")

Coefficients:
       Value Std. Error t value
male -0.1533     0.1841 -0.8325

Intercepts:
      Value   Std. Error t value
1|2    0.2286  0.1348     1.6958
2|3    0.4165  0.1365     3.0511
3|4    0.4329  0.1367     3.1661
4|6    0.4494  0.1370     3.2810
6|8    0.4660  0.1372     3.3962
8|9    0.4998  0.1377     3.6297
9|10   0.5875  0.1390     4.2273
10|11  0.7002  0.1410     4.9663

Residual Deviance: 406.8553 
AIC: 424.8553 
(206 observations deleted due to missingness)
> (zc <- summary(cpolr( cbind(Cs, Cs) ~ male, data = poleff2, Hess=TRUE)))

There is at least one missing category: 5 7 

Call:
cpolr(formula = cbind(Cs, Cs) ~ male, data = poleff2, Hess = TRUE)

Coefficients:
       Value Std. Error t value
male -0.1533     0.1841 -0.8325

Intercepts:
      Value   Std. Error t value
1|2    0.2286  0.1348     1.6958
2|3    0.4165  0.1365     3.0511
3|4    0.4329  0.1367     3.1661
4|6    0.4494  0.1370     3.2810
6|8    0.4660  0.1372     3.3962
8|9    0.4998  0.1377     3.6297
9|10   0.5875  0.1390     4.2273
10|11  0.7002  0.1410     4.9663

Residual Deviance: 406.8553 
AIC: 424.8553 
(206 observations deleted due to missingness)
> cat("This equality MUST be true\n")
This equality MUST be true
> allequal.test(zc$coef, zp$coef)
Expecting all.equal() = TRUE  :  test is correctly TRUE 
> 
> cat("Compare with polr using data with holes in C -- no covariate\n")
Compare with polr using data with holes in C -- no covariate
> (zp <- summary(polr( as.factor(Cs) ~ 1, data = poleff2, method="probit", Hess=TRUE)))
Call:
polr(formula = as.factor(Cs) ~ 1, data = poleff2, Hess = TRUE, 
    method = "probit")

No coefficients

Intercepts:
      Value  Std. Error t value
1|2   0.3073 0.0967     3.1791 
2|3   0.4949 0.0994     4.9804 
3|4   0.5112 0.0997     5.1293 
4|6   0.5277 0.1000     5.2781 
6|8   0.5443 0.1003     5.4265 
8|9   0.5781 0.1010     5.7226 
9|10  0.6655 0.1031     6.4566 
10|11 0.7776 0.1062     7.3204 

Residual Deviance: 407.5485 
AIC: 423.5485 
(206 observations deleted due to missingness)
> (zc <- summary(cpolr( cbind(Cs, Cs) ~ 1, data = poleff2, Hess=TRUE)))

There is at least one missing category: 5 7 

Call:
cpolr(formula = cbind(Cs, Cs) ~ 1, data = poleff2, Hess = TRUE)

No coefficients

Intercepts:
      Value  Std. Error t value
1|2   0.3073 0.0967     3.1791 
2|3   0.4949 0.0994     4.9804 
3|4   0.5112 0.0997     5.1293 
4|6   0.5277 0.1000     5.2781 
6|8   0.5443 0.1003     5.4265 
8|9   0.5781 0.1010     5.7226 
9|10  0.6655 0.1031     6.4566 
10|11 0.7776 0.1062     7.3204 

Residual Deviance: 407.5485 
AIC: 423.5485 
(206 observations deleted due to missingness)
> cat("This equality MUST be true\n")
This equality MUST be true
> allequal.test(zc$coef, zp$coef)
Expecting all.equal() = TRUE  :  test is correctly TRUE 
> 
> ## fitted values
> data(table1src)
> data(table1)
> 
> ## replicate table1
> test1 <- anchors( y ~ z1 + z2 , data=table1src, method="C")
> summary(test1)

ANCHORS: SUMMARY OF RELATIVE RANK ANALYSIS:

Overview of C-ranks

Number of cases: 4 with interval value, 9 with scalar value

Maximum possible C-rank value: 5

Interval on C-scale: Frequency and proportions Cs to Ce
         N  Prop MinEnt
 1 to  1 3 0.231      1
 2 to  2 1 0.077      2
 3 to  3 1 0.077      3
 4 to  4 1 0.077      4
 5 to  5 3 0.231      5
 1 to  4 1 0.077      1
 1 to  5 1 0.077      1
 2 to  4 1 0.077      2
 2 to  5 1 0.077      5

Note: MinEnt is the rank for the interval that minimizes entropy

Summary of C-ranks with ties/intervals broken:

Distribution of ranks omiting interval cases
     1     2     3     4     5
 0.333 0.111 0.111 0.111 0.333

Distribution of ranks allocating interval cases uniformly
     1     2     3     4     5
 0.265 0.156 0.156 0.156 0.265

Distribution of ranks allocating interval cases via cpolr
and conditioning on observed ranks
    1     2     3     4     5 
0.283 0.145 0.145 0.145 0.283 

Allocating cases to their MinEnt values produces
    1     2     3     4     5 
0.385 0.154 0.077 0.077 0.308 
> table1src2 <- insert(table1src, test1)
> print(table1src2)
           y z1 z2 z3 Ce Cs
1 : 1 to 1 1  2  3  2  1  1
2 : 2 to 2 3  3  4  3  2  2
3 : 3 to 3 3  2  4  2  3  3
4 : 4 to 4 4  2  4  2  4  4
5 : 5 to 5 4  2  3  2  5  5
6 : 1 to 1 2  3  3  3  1  1
7 : 2 to 4 2  2  2  2  4  2
8 : 5 to 5 3  2  2  2  5  5
9 : 1 to 1 1  3  2  3  1  1
10: 1 to 4 2  3  2  3  4  1
11: 1 to 5 3  4  2  4  5  1
12: 2 to 5 3  3  2  3  5  2
13: 5 to 5 4  3  2  3  5  5
>       
> z <- cpolr( cbind(Cs, Cs) ~ 1, data = table1src2, Hess=TRUE)
> print(fitted(z, average=FALSE))
                   1        2          3          4       5
1 : 1 to 1 0.3846149 0.230769 0.07692307 0.07692309 0.23077
2 : 2 to 2 0.3846149 0.230769 0.07692307 0.07692309 0.23077
3 : 3 to 3 0.3846149 0.230769 0.07692307 0.07692309 0.23077
4 : 4 to 4 0.3846149 0.230769 0.07692307 0.07692309 0.23077
5 : 5 to 5 0.3846149 0.230769 0.07692307 0.07692309 0.23077
6 : 1 to 1 0.3846149 0.230769 0.07692307 0.07692309 0.23077
7 : 2 to 4 0.3846149 0.230769 0.07692307 0.07692309 0.23077
8 : 5 to 5 0.3846149 0.230769 0.07692307 0.07692309 0.23077
9 : 1 to 1 0.3846149 0.230769 0.07692307 0.07692309 0.23077
10: 1 to 4 0.3846149 0.230769 0.07692307 0.07692309 0.23077
11: 1 to 5 0.3846149 0.230769 0.07692307 0.07692309 0.23077
12: 2 to 5 0.3846149 0.230769 0.07692307 0.07692309 0.23077
13: 5 to 5 0.3846149 0.230769 0.07692307 0.07692309 0.23077
attr(,"class")
[1] "fitted.cpolr"
> print(fitted(z, average=TRUE))
         1          2          3          4          5 
0.38461486 0.23076898 0.07692307 0.07692309 0.23077000 
attr(,"class")
[1] "fitted.cpolr"
> print(fitted(z, test1, average=FALSE))
                   1         2          3          4         5
1 : 1 to 1 1.0000000 0.0000000 0.00000000 0.00000000 0.0000000
2 : 2 to 2 0.0000000 1.0000000 0.00000000 0.00000000 0.0000000
3 : 3 to 3 0.0000000 0.0000000 1.00000000 0.00000000 0.0000000
4 : 4 to 4 0.0000000 0.0000000 0.00000000 1.00000000 0.0000000
5 : 5 to 5 0.0000000 0.0000000 0.00000000 0.00000000 1.0000000
6 : 1 to 1 1.0000000 0.0000000 0.00000000 0.00000000 0.0000000
7 : 2 to 4 0.0000000 0.5999997 0.20000012 0.20000016 0.0000000
8 : 5 to 5 0.0000000 0.0000000 0.00000000 0.00000000 1.0000000
9 : 1 to 1 1.0000000 0.0000000 0.00000000 0.00000000 0.0000000
10: 1 to 4 0.4999998 0.3000000 0.10000009 0.10000012 0.0000000
11: 1 to 5 0.3846149 0.2307690 0.07692307 0.07692309 0.2307700
12: 2 to 5 0.0000000 0.3749993 0.12499989 0.12499991 0.3750009
13: 5 to 5 0.0000000 0.0000000 0.00000000 0.00000000 1.0000000
attr(,"class")
[1] "fitted.cpolr"
> print(fitted(z, test1, average=TRUE))
        1         2         3         4         5 
0.2988165 0.1927514 0.1155326 0.1155326 0.2773670 
attr(,"class")
[1] "fitted.cpolr"
> print(fitted(z, test1, average=TRUE, unconditional=TRUE))
         1          2          3          4          5 
0.38461486 0.23076898 0.07692307 0.07692309 0.23077000 
attr(,"class")
[1] "fitted.cpolr"
> 
> p <- fitted(z, average=TRUE)
> print(p[2:4]/sum(p[2:4]))
        2         3         4 
0.5999997 0.2000001 0.2000002 
> 
> 
> 
